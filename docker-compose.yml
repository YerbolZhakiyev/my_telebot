version: '3'
networks:
  loki:
    driver: bridge
volumes:
    prometheus_data: {}
    grafana_data: {}

services:
  jenkins:
    image: jenkins/jenkins
    user: root
    container_name: jenkins
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - /var/lib/docker/volumes/jenkins_volume/_data:/var/jenkins_home
      - /root/.ssh:/root/.ssh
    restart: always
    labels:
      org.label-schema.group: "monitoring"

  db:
    image: postgres
    container_name: postgres    
    restart: always
    user: root
    environment:
      POSTGRES_USER: erbol
      POSTGRES_PASSWORD: password
      POSTGRES_DB: tg_bot
    volumes:
      - /var/lib/postgresql/data:/var/lib/postgresql/data
    # ports: #----------- open port only if pg admin is needed, and then close it
    #   - "5433:5432"
    networks:
      - loki
    labels:
      org.label-schema.group: "monitoring"

  nginx:
    image: nginx
    container_name: nginx
    user: root
    ports:
      - "80:80"
    volumes:
      - /root/my_telebot/nginx/nginx.conf:/etc/nginx/nginx.conf
      - /root/my_telebot/html:/html
    restart: always
    depends_on: 
      - backend
    networks:
      - loki
    labels:
      org.label-schema.group: "monitoring"

  backend:
    build: ./backend
    container_name: backend
    networks:
      - loki
    expose:
      - 8000
    labels:
      org.label-schema.group: "monitoring"

  tg_bot:
    build: ./tg_bot
    container_name: tg_bot
    volumes:
      - /root/my_telebot/tg_bot:/tg_bot
      - /root/my_telebot/tg_bot/.env:/tg_bot/.env
    restart: always
    networks:
      - loki
    labels:
      org.label-schema.group: "monitoring"

  promtail:
    image: grafana/promtail
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - /root/my_telebot/promtail:/etc/promtail
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers
    restart: unless-stopped
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - loki
    labels:
      org.label-schema.group: "monitoring"

  loki:
    image: grafana/loki
    container_name: loki
    volumes:
      - /root/my_telebot/loki:/etc/loki
      - /root/my_telebot/volumes/loki:/loki
    ports: 
      - "3100:3100"
    restart: unless-stopped
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - loki
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana
    container_name: grafana
    user: root
    volumes:
      - /root/my_telebot/loki/grafana/provisioning/:/etc/grafana/provisioning/
      - /root/my_telebot/volumes/grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    restart: unless-stopped 
    networks:
      - loki
    labels:
      org.label-schema.group: "monitoring"
    environment:
      GF_SERVER_ROOT_URL: http://${HOST_ADDR}/grafana/
      HOST_ADDR: ${HOST_ADDR}

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - loki
    labels:
      org.label-schema.group: "monitoring"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - /root/my_telebot/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    expose:
      - 9090
    networks:
      - loki
    labels:
      org.label-schema.group: "monitoring"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.46.0 #gcr.io/google-containers/cadvisor:v0.34.0
    privileged: true
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      # - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - loki
    labels:
      org.label-schema.group: "monitoring"

  pushgateway:
    image: prom/pushgateway:v1.5.1
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - loki
    labels:
      org.label-schema.group: "monitoring"